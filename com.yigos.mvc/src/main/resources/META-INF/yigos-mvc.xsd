<?xml version="1.0" encoding="UTF-8" ?>
<xsd:schema xmlns="http://www.yigos.com/schema/yigosmvc"
xmlns:xsd="http://www.w3.org/2001/XMLSchema"
xmlns:beans="http://www.springframework.org/schema/beans"
xmlns:tool="http://www.springframework.org/schema/tool"
targetNamespace="http://www.yigos.com/schema/yigosmvc"
elementFormDefault="qualified" attributeFormDefault="unqualified">

<xsd:import namespace="http://www.springframework.org/schema/beans" schemaLocation="http://www.springframework.org/schema/beans/spring-beans.xsd" />
<xsd:import namespace="http://www.springframework.org/schema/tool" schemaLocation="http://www.springframework.org/schema/tool/spring-tool.xsd" />

<xsd:element name="annotation-driven">
	<xsd:annotation>
		<xsd:documentation source="java:org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"><![CDATA[
Configures the annotation-driven Spring MVC Controller programming model.
Note that, with Spring 3.0, this tag works in Servlet MVC only!

See org.springframework.web.servlet.config.annotation.EnableWebMvc Javadoc for
information on code-based alternatives to enabling annotation-driven Spring MVC
support.
		]]></xsd:documentation>
	</xsd:annotation>
	<xsd:complexType>
		<xsd:all minOccurs="0">
			<xsd:element name="message-converters" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
Configures one or more HttpMessageConverter types to use for converting @RequestBody method parameters and @ResponseBody method return values.
Using this configuration element is optional.
HttpMessageConverter registrations provided here will take precedence over HttpMessageConverter types registered by default.
Also see the register-defaults attribute if you want to turn off default registrations entirely.
					]]></xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:sequence>
						<xsd:choice maxOccurs="unbounded">
							<xsd:element ref="beans:bean">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
	An HttpMessageConverter bean definition.
									]]></xsd:documentation>
								</xsd:annotation>
							</xsd:element>
							<xsd:element ref="beans:ref">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
	A reference to an HttpMessageConverter bean.
									]]></xsd:documentation>
								</xsd:annotation>
							</xsd:element>
						</xsd:choice>
					</xsd:sequence>
					<xsd:attribute name="register-defaults" type="xsd:boolean" default="true">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
Whether or not default HttpMessageConverter registrations should be added in addition to the ones provided within this element.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="argument-resolvers" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
Configures HandlerMethodArgumentResolver types to support custom controller method argument types.
   Using this option does not override the built-in support for resolving handler method arguments.
   To customize the built-in support for argument resolution configure RequestMappingHandlerAdapter directly.
					]]></xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element ref="beans:bean" minOccurs="1" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
The HandlerMethodArgumentResolver (or WebArgumentResolver for backwards compatibility) bean definition.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>			
			<xsd:element name="return-value-handlers" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
Configures HandlerMethodReturnValueHandler types to support custom controller method return value handling.
   Using this option does not override the built-in support for handling return values.
   To customize the built-in support for handling return values configure RequestMappingHandlerAdapter directly.
					]]></xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element ref="beans:bean" minOccurs="1" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
The HandlerMethodReturnValueHandler bean definition.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>			
			<xsd:element name="async-support" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
Configure options for asynchronous request processing.
					]]></xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:all minOccurs="0">
						<xsd:element name="callable-interceptors" minOccurs="0">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
The ordered set of interceptors that intercept the lifecycle of concurrently executed
requests, which start after a controller returns a java.util.concurrent.Callable.
								]]></xsd:documentation>
							</xsd:annotation>
							<xsd:complexType>
								<xsd:sequence>
									<xsd:element ref="beans:bean" minOccurs="1" maxOccurs="unbounded">
										<xsd:annotation>
											<xsd:documentation><![CDATA[
Registers a CallableProcessingInterceptor.
											]]></xsd:documentation>
										</xsd:annotation>
									</xsd:element>
								</xsd:sequence>
							</xsd:complexType>
						</xsd:element>
						<xsd:element name="deferred-result-interceptors" minOccurs="0">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
The ordered set of interceptors that intercept the lifecycle of concurrently executed
requests, which start after a controller returns a DeferredResult.
								]]></xsd:documentation>
							</xsd:annotation>
							<xsd:complexType>
								<xsd:sequence>
									<xsd:element ref="beans:bean" minOccurs="1" maxOccurs="unbounded">
										<xsd:annotation>
											<xsd:documentation><![CDATA[
Registers a DeferredResultProcessingInterceptor.
											]]></xsd:documentation>
										</xsd:annotation>
									</xsd:element>
								</xsd:sequence>
							</xsd:complexType>
						</xsd:element>
					</xsd:all>
					<xsd:attribute name="task-executor" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation source="java:org.springframework.core.task.AsyncTaskExecutor"><![CDATA[
The bean name of a default AsyncTaskExecutor to use when a controller method returns a {@link Callable}.
Controller methods can override this default on a per-request basis by returning an AsyncTask.
By default a SimpleAsyncTaskExecutor is used which does not re-use threads and is not recommended for production.
							]]></xsd:documentation>
							<xsd:appinfo>
								<tool:annotation kind="ref">
									<tool:expected-type type="java:org.springframework.core.task.AsyncTaskExecutor" />
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="default-timeout" type="xsd:long">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
Specify the amount of time, in milliseconds, before asynchronous request handling times out.
In Servlet 3, the timeout begins after the main request processing thread has exited and ends when the request is dispatched again for further processing of the concurrently produced result.
If this value is not set, the default timeout of the underlying implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:complexType>
			</xsd:element>
		</xsd:all>
		<xsd:attribute name="conversion-service" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation source="java:org.springframework.core.convert.ConversionService"><![CDATA[
The bean name of the ConversionService that is to be used for type conversion during field binding.
This attribute is not required, and only needs to be specified explicitly if custom converters need to be configured.
If not specified, a default FormattingConversionService is registered that contains converters to/from standard JDK types.
In addition, full support for date/time formatting will be installed if the Joda Time library is present on the classpath.
				]]></xsd:documentation>
				<xsd:appinfo>
					<tool:annotation kind="ref">
						<tool:expected-type type="java:org.springframework.core.convert.ConversionService" />
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="validator" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation source="java:org.springframework.validation.Validator"><![CDATA[
The bean name of the Validator that is to be used to validate Controller model objects.
This attribute is not required, and only needs to be specified explicitly if a custom Validator needs to be configured.
If not specified, JSR-303 validation will be installed if a JSR-303 provider is present on the classpath.
				]]></xsd:documentation>
				<xsd:appinfo>
					<tool:annotation kind="ref">
						<tool:expected-type type="java:org.springframework.validation.Validator" />
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="content-negotiation-manager" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation source="java:org.springframework.web.accept.ContentNegotiationManager"><![CDATA[
The bean name of a ContentNegotiationManager that is to be used to determine requested media types. If not specified,
a default ContentNegotiationManager is configured that checks the request path extension first and the "Accept" header
second where path extensions such as ".json", ".xml", ".atom", and ".rss" are recognized if Jackson, JAXB2, or the
Rome libraries are available. As a fallback option, the path extension is also used to perform a lookup through
the ServletContext and the Java Activation Framework (if available).
				]]></xsd:documentation>
				<xsd:appinfo>
					<tool:annotation kind="ref">
						<tool:expected-type type="java:org.springframework.web.accept.ContentNegotiationManager" />
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="message-codes-resolver" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The bean name of a MessageCodesResolver to use to build message codes from data binding and validation error codes.
This attribute is not required.
If not specified the DefaultMessageCodesResolver is used.
				]]></xsd:documentation>
				<xsd:appinfo>
					<tool:annotation kind="ref">
						<tool:expected-type type="java:org.springframework.validation.MessageCodesResolver" />
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="ignoreDefaultModelOnRedirect" type="xsd:boolean">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
By default the content of the "default" model is used both during rendering and redirect scenarios. 
Alternatively a controller method can declare a RedirectAttributes argument and use it to provide attributes for a redirect. 
Setting this flag to true ensures the "default" model is never used in a redirect scenario even if a RedirectAttributes argument is not declared.
Setting it to false means the "default" model may be used in a redirect if the controller method doesn't declare a RedirectAttributes argument.
The default setting is false but new applications should consider setting it to true.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="base-package" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
The base package of controllers. All controller class in this package will use the default mapping rule.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
</xsd:element>

</xsd:schema>
